27.12.2023
Переработана логика основного цикла
Добавлены mock-функции на время разработки для уменьшения нагрузки на Api поставщиков
Произведен рефакторинг - утилитарные функции разнесены в соответствующие файлы,
    константы и собраны в файле constants.py
Переработано хранение товаров, по которым пришел отказ:
    теперь ключом в БД является кортеж ('Номер заказа', 'Номер товара'), что
    значительно упрощает поиск повторяющихся товаров.
Из проекта убрана Poetry
Добавлен образец заполнения констант окружения .env.example

Удален скрипт отправки сообщений в WhatsApp через web-версию
Начата работа со списком изменений.

Предстоящие задачи:
    - вынести в слой сервисов функционал работы с БД.
    - разработать функционал маппинга сообщений на места, то есть реализовать
    возможность отправки сообщения ответственному по магазину в зависимости от
    адреса заказа.
    - подключить дополнительных поставщиков.
    - вынести работу с разными поставщиками в общий модуль.

10.01.2024
Убраны сырые запросы.
Добавлена SQLAlchemy для хранения и обработки заказов.
Переименован файл constsnts в settings.
Удален неиспользуемый класс Part.
Формат времени единообразен для логгера и заказов в БД.


17.01.2024
Сделан единый формат datetime.
В бд записывается дата и время когда получили информацию об отмене.
Исправлена проверка наличия отмененного товара в БД.
Откорректирован вид готового сообщения.
Добавлен парсер аргументов, появилась возможность запускать скрипт в режиме
записи отмененных товаров в БД без отправки уведомлений.  



#TODO Список необходимых изменений

# 1. Отловить исключения при работе api Berg
# 2. Настроить проверку адресов для краткого хранения в БД ('Миллера', 'Широкая')
     Пример словарь delivery_adresses в файле rossko.py. Реализовать через
     регулярные выражения
# 3. Изменить возврат данных в парсерах на инстансы Order для удобства чтения
     в коде
